<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
</head>
<body>
  <video id="gum-local" autoplay playsinline muted></video>
  <button id="startButton" disabled>Start</button>
  <fieldset id="options" style="display:none">
    <legend>Advanced options</legend>
    <select id="displaySurface">
      <option value="default">Show default sharing options</option>
      <option value="browser">Prefer to share a browser tab</option>
      <option value="window">Prefer to share a window</option>
      <option value="monitor" selected>Prefer to share an entire screen</option>
    </select>
  </fieldset>
  <div id="errorMsg"></div>
  <script>
    (async function() {
      const preferredDisplaySurface = document.getElementById('displaySurface');
      const startButton = document.getElementById('startButton');

      document.getElementById('options').style.display = 'block';

      async function handleSuccess(stream) {
        startButton.disabled = true;
        preferredDisplaySurface.disabled = true;
        const video = document.querySelector('video');
        const track = stream.getVideoTracks()[0];
        track.contentHint = 'text';
        try {
          // const result = await track.applyConstraints({
          //   resizeMode: 'none',
          //   width: 3024,
          //   height: 1964,
          //   frameRate: 5,
          // });
          // console.log('applyConstraints - ok ', result);
        } catch (e) {
          console.error('applyConstraints: ', e);
        }
        video.srcObject = stream;

        console.log('stream', stream);
        console.log('track', track);
        console.log('settings', track.getSettings());
        console.log('capabilities', track.getCapabilities()); // https://github.com/w3c/mediacapture-screen-share/issues/35
        window.stream = stream;
        window.track = track;

        // demonstrates how to detect that the user has stopped
        // sharing the screen via the browser UI.
        stream.getVideoTracks()[0].addEventListener('ended', () => {
          errorMsg('The user has ended sharing the screen');
          startButton.disabled = false;
          preferredDisplaySurface.disabled = false;
        });
      }

      function handleError(error) {
        errorMsg(`getDisplayMedia error: ${error.name}`, error);
      }

      function errorMsg(msg, error) {
        const errorElement = document.querySelector('#errorMsg');
        errorElement.innerHTML += `<p>${msg}</p>`;
        if (typeof error !== 'undefined') {
          console.error(error);
        }
      }


      startButton.addEventListener('click', () => {
        const options = {
          audio: true,
          video: {
            resizeMode: 'none',
            frameRate: 5,
          },
        };
        const displaySurface = preferredDisplaySurface.options[preferredDisplaySurface.selectedIndex].value;
        if (displaySurface !== 'default') {
          options.video = {displaySurface};
        }
        navigator.mediaDevices.getDisplayMedia(options)
            .then(handleSuccess, handleError);
      });

      if ((navigator.mediaDevices && 'getDisplayMedia' in navigator.mediaDevices)) {
        startButton.disabled = false;
      } else {
        errorMsg('getDisplayMedia is not supported');
      }
    })();
  </script>
</body>
</html>
